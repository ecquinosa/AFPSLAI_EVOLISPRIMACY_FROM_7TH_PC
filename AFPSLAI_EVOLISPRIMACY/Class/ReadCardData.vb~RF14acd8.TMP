ation must have appropriate access permissions 
 for any database actions.) 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_SCOPE_SYSTEM">
 <summary> 
 The context is the system context, and any database operations 
 are performed within the domain of the system. (The calling 
 application must have appropriate access permissions for any 
 database actions.) 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_UNAWARE">
 <summary> 
 The application is unaware of the current state, and would like 
 to know. The use of this value results in an immediate return 
 from state transition monitoring services. This is represented 
 by all bits set to zero. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_IGNORE">
 <summary> 
 The application requested that this reader be ignored. No other 
 bits will be set. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_CHANGED">
 <summary> 
 This implies that there is a difference between the state 
 believed by the application, and the state known by the Service 
 Manager.When this bit is set, the application may assume a 
 significant state change has occurred on this reader. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_UNKNOWN">
 <summary> 
 This implies that the given reader name is not recognized by 
 the Service Manager. If this bit is set, then SCARD_STATE_CHANGED 
 and SCARD_STATE_IGNORE will also be set. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_UNAVAILABLE">
 <summary> 
 This implies that the actual state of this reader is not 
 available. If this bit is set, then all the following bits are 
 clear. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_EMPTY">
 <summary> 
 This implies that there is not card in the reader. If this bit 
 is set, all the following bits will be clear. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_PRESENT">
 <summary> 
 This implies that there is a card in the reader. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_ATRMATCH">
 <summary> 
 This implies that there is a card in the reader with an ATR 
 matching one of the target cards. If this bit is set, 
 SCARD_STATE_PRESENT will also be set. This bit is only returned 
 on the SCardLocateCard() service. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_EXCLUSIVE">
 <summary> 
 This implies that the card in the reader is allocated for 
 exclusive use by another application. If this bit is set, 
 SCARD_STATE_PRESENT will also be set. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_INUSE">
 <summary> 
 This implies that the card in the reader is in use by one or 
 more other applications, but may be connected to in shared mode. 
 If this bit is set, SCARD_STATE_PRESENT will also be set. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_MUTE">
 <summary> 
 This implies that the card in the reader is unresponsive or not 
 supported by the reader or software. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_STATE_UNPOWERED">
 <summary> 
 This implies that the card in the reader has not been powered up. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_SHARE_EXCLUSIVE">
 <summary> 
 This application is not willing to share this card with other 
 applications. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_SHARE_SHARED">
 <summary> 
 This application is willing to share this card with other 
 applications. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_SHARE_DIRECT">
 <summary> 
 This application demands direct control of the reader, so it 
 is not available to other applications. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_LEAVE_CARD">
 <summary> 
 Don't do anything special on close 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_RESET_CARD">
 <summary> 
 Reset the card on close 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_UNPOWER_CARD">
 <summary> 
 Power down the card on close 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_EJECT_CARD">
 <summary> 
 Eject the card on close 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_PROTOCOL_UNDEFINED">
 <summary> 
 There is no active protocol. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_PROTOCOL_T0">
 <summary> 
 T=0 is the active protocol. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_PROTOCOL_T1">
 <summary> 
 T=1 is the active protocol. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_PROTOCOL_RAW">
 <summary> 
 Raw is the active protocol. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_PROTOCOL_DEFAULT">
 <summary>
 Use implicit PTS.
 </summary>
 <remarks></remarks>
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_UNKNOWN">
 <summary> 
 This value implies the driver is unaware of the current 
 state of the reader. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_ABSENT">
 <summary> 
 This value implies there is no card in the reader. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_PRESENT">
 <summary> 
 This value implies there is a card is present in the reader, 
 but that it has not been moved into position for use. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_SWALLOWED">
 <summary> 
 This value implies there is a card in the reader in position 
 for use. The card is not powered. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_POWERED">
 <summary> 
 This value implies there is power is being provided to the card, 
 but the Reader Driver is unaware of the mode of the card. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_NEGOTIABLE">
 <summary> 
 This value implies the card has been reset and is awaiting 
 PTS negotiation. 
 </summary> 
</member>
<member name="F:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCARD_SPECIFIC">
 <summary> 
 This value implies the card has been reset and specific 
 communication protocols have been established. 
 </summary> 
</member>
<member name="M:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCardEstablishContext(System.Int32,System.Int32,System.Int32,System.Int32@)">
 <summary> 
 The SCardEstablishContext function establishes the resource manager context (the scope) within which database operations are performed. 
 </summary> 
 <param name="dwScope">[in] Scope of the resource manager context. This parameter can be one of the following values.</param> 
 <param name="pvReserved1">[in] Reserved for future use and must be NULL. This parameter will allow a suitably privileged management application to act on behalf of another user.</param> 
 <param name="pvReserved2">[in] Reserved for future use and must be NULL. </param> 
 <param name="phContext">[out] Handle to the established resource manager context. This handle can now be supplied to other functions attempting to do work within this context.</param> 
 <returns></returns> 
</member>
<member name="M:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCardReleaseContext(System.Int32)">
 <summary> 
 The SCardReleaseContext function closes an established resource manager context, freeing any resources allocated under that context, including SCARDHANDLE objects and memory allocated using the SCARD_AUTOALLOCATE length designator. 
 </summary> 
 <param name="hContext">[in] Handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext.</param> 
 <returns></returns> 
</member>
<member name="M:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCardConnect(System.Int32,System.String@,System.Int32,System.Int32,System.Int32@,System.Int32@)">
 <summary> 
 The SCardConnect function establishes a connection (using a specific resource manager context) between the calling application and a smart card contained by a specific reader. If no card exists in the specified reader, an error is returned. 
 </summary> 
 <param name="hContext">[in] A handle that identifies the resource manager context. The resource manager context is set by a previous call to SCardEstablishContext.</param> 
 <param name="szReaderName">[in] The name of the reader that contains the target card. </param> 
 <param name="dwShareMode">[in] A flag that indicates whether other applications may form connections to the card.</param> 
 <param name="dwPrefProtocol">[in] A bit mask of acceptable protocols for the connection. Possible values may be combined with the OR operation.</param> 
 <param name="hCard">[out] A handle that identifies the connection to the smart card in the designated reader. </param> 
 <param name="ActiveProtocol">[out] A flag that indicates the established active protocol.</param> 
 <returns></returns> 
</member>
<member name="M:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCardDisconnect(System.Int32,System.Int32)">
 <summary> 
 The SCardDisconnect function terminates a connection previously opened between the calling application and a smart card in the target reader. 
 </summary> 
 <param name="hCard">[in] Reference value obtained from a previous call to SCardConnect. </param> 
 <param name="Disposition">[in] Action to take on the card in the connected reader on close. </param> 
 <returns>This function returns different values depending on whether it succeeds or fails.</returns> 
</member>
<member name="M:AFPSLAI_EVOLISPRIMACY.ModWinsCard.SCardListReaderGroups(System.Int32,System.String@,System.Int32@)">
 <summary> 
 The SCardListReaderGroups function provides the list of reader groups that have previously been introduced to the system. 
 </summary> 
 <param name="hContext">[in] Handle that identifies the resource manager context for the query. The resource manager context can be set by a previous call to SCardEstablishContext. This parameter cannot be NULL.</param> 
 <param name="mzGroups">[out] Multi-string that lists the reader groups defined to the system and available to the current user on the current terminal.